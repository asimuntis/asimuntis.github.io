<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pwn on </title>
    <link>https://asimuntis.github.io/tags/pwn/</link>
    <description>Recent content in Pwn on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 29 Oct 2019 20:38:02 +0000</lastBuildDate>
    
	<atom:link href="https://asimuntis.github.io/tags/pwn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hack.Lu CTF 2019: Baby kernel 2</title>
      <link>https://asimuntis.github.io/post/hack-lu-ctf-2019-baby-kernel-2/</link>
      <pubDate>Tue, 29 Oct 2019 20:38:02 +0000</pubDate>
      
      <guid>https://asimuntis.github.io/post/hack-lu-ctf-2019-baby-kernel-2/</guid>
      <description>Baby Kernel 2 - pwn , 202 pts, solves: 68 
This post is a follow up to a quick writeup that I&amp;rsquo;ve posted on my github.
We are provided with a minimal kernel environment containing custom kernel module and client that communicates with it.
Having read/write primitive in kernel space we can escalate our privileges by changing cred field of the task_struct of our current task. Provided System.map file contains all symbols from the target kernel:</description>
    </item>
    
    <item>
      <title>Ã¥ngstromCTF 2019</title>
      <link>https://asimuntis.github.io/post/angstromctf-2019/</link>
      <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://asimuntis.github.io/post/angstromctf-2019/</guid>
      <description>Reversing: One Bite [40pts] 
Challenge binary takes input from the user; performs single byte xor with 0x3c key and then compares with the hardcoded string.
Let&amp;rsquo;s verify it with ltrace:
~&amp;gt; ltrace ./one_bite __libc_start_main(0x4006a6, 1, 0x7ffe30270b48, 0x400780 &amp;lt;unfinished ...&amp;gt; puts(&amp;quot;Give me a flag to eat: &amp;quot;Give me a flag to eat: ) = 24 fgets(aaaa &amp;quot;aaaa\n&amp;quot;, 34, 0x7efe4674b8e0) = 0x7ffe30270a20 strlen(&amp;quot;aaaa\n&amp;quot;) = 5 strlen(&amp;quot;]aaa\n&amp;quot;) = 5 strlen(&amp;quot;]]aa\n&amp;quot;) = 5 strlen(&amp;quot;]]]a\n&amp;quot;) = 5 strlen(&amp;quot;]]]]\n&amp;quot;) = 5 strlen(&amp;quot;]]]]6&amp;quot;) = 5 strcmp(&amp;quot;]]]]6&amp;quot;, &amp;quot;]_HZGUcHTURWcUQc[SUR[cHSc^YcOU_W&amp;quot;.</description>
    </item>
    
    <item>
      <title>HTB Redcross local root (basic rop)</title>
      <link>https://asimuntis.github.io/post/htb-redcross-local-root/</link>
      <pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://asimuntis.github.io/post/htb-redcross-local-root/</guid>
      <description>Warmup post about the alternative way of rooting the Redcross box.
Target binary:
iptctl: setuid, setgid ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, not stripped &amp;gt; source was also available on the host: /var/jail/home/public/src/iptctl.c  Ideally we could easily reach the vulnerable part of the code:
if(argc==2){ if(strstr(argv[1],&amp;#34;-i&amp;#34;)) interactive(inputAddress, inputAction, argv[0]); } else{ strcpy(inputAction, argv[1]); strcpy(inputAddress, argv[2]); } ..but let&amp;rsquo;s pick the other way.
recon The interactive() function looks interesting:</description>
    </item>
    
  </channel>
</rss>